name: Transfer Issues

on:
  workflow_call:
    secrets:
      APP_ID:
        required: true
      APP_PRIVATE_KEY:
        required: true

env:
  APP_ID: ${{ secrets.APP_ID }}
  APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
  COMMENT_MESSAGE: "Transfer this issue to the developer-center repository"
  TARGET_REPO: "developer-center"

jobs:
  transfer:
    runs-on: ubuntu-latest
    steps:
      - name: install depends for load scripts
        run: |
          npm install @octokit/rest
          npm install @octokit/auth-app
      - name: Get token using github-script
        id: get-token
        uses: actions/github-script@v6
        with:
          script: |
            global["fetch"] = fetch
            const { Octokit } = require("@octokit/rest");
            const { createAppAuth } = require("@octokit/auth-app");
            const appOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: process.env.APP_ID,
                privateKey: process.env.APP_PRIVATE_KEY,
              }
            });
            const app_installation = await appOctokit.rest.apps.getRepoInstallation({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name
            });
            const { token } = await appOctokit.auth({
              type: "installation",
              installationId: app_installation.data.id
            });
            core.setOutput('app_token', token)
      - name: transfer issues
        uses: actions/github-script@v5
        with:
          github-token: ${{ steps.get-token.outputs.app_token }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.COMMENT_MESSAGE
            })
            const repo = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: process.env.TARGET_REPO
            });
            const query = `mutation {
              transferIssue(input: { issueId: "${context.payload.issue.node_id}", repositoryId: "${repo.data.node_id}" }) { __typename }
            }`;
            await github.graphql(query)
