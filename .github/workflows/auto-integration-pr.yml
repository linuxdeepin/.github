name: create-auto-integration-pr
on:
  workflow_call:
    inputs:
      organization:
        type: string
        default: deepin-community
      repository:
        type: string
        default: Repository-Integration
      integrationrepo:
        type: string
        default: undefined
      tagsha:
        type: string
        required: true
  workflow_dispatch:
    inputs:
      organization:
        type: string
        default: peeweep-test
      repository:
        type: string
        default: Repository-Integration
      integrationrepo:
        type: string
        default: "deepin-community/glider"
      tagsha:
        type: string
        default: "c80020aefa9699f51944e07b1ae02d606a6b25fc"

concurrency:
  group: "ci-autointegration"
  cancel-in-progress: false

env:
  APP_ID: ${{ secrets.INTEGRATION_APP_ID }}
  APP_PRIVATE_KEY: ${{ secrets.INTEGRATION_APP_PRIVATE_KEY }}
  organization: ${{ inputs.organization }}
  repository: ${{ inputs.repository }}

jobs:
  pr-auto-integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: "${{ inputs.organization }}/${{ inputs.repository }}"

      - name: Install depends for load scripts
        run: |
          npm install js-yaml
          npm install shelljs
          npm install @octokit/rest
          npm install @octokit/auth-app

      - name: Get integration app token
        id: integration_token
        uses: actions/github-script@v6
        with:
          script: |
            global["fetch"] = fetch
            const { Octokit } = require("@octokit/rest");
            const { createAppAuth } = require("@octokit/auth-app");
            const appOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: process.env.APP_ID,
                privateKey: process.env.APP_PRIVATE_KEY,
              }
            });
            const app_installation = await appOctokit.rest.apps.getRepoInstallation({
              owner: process.env.organization,
              repo: process.env.repository
            });
            const { token } = await appOctokit.auth({
              type: "installation",
              installationId: app_installation.data.id
            });
            core.setOutput('app_token', token)

      - name: Integration config
        uses: actions/github-script@v6
        id: integration-config
        # workflow_dispatch event used for manual trigger workflow
        if: startsWith(github.event.comment.body, '/integrate') || github.event_name == 'workflow_dispatch'
        with:
          script: |
            // find auto integration branch
            const BOT_NAME = "AutoIntegrationPr Bot"
            const COMMENT_HEAD = "**" + BOT_NAME + "**\n"
            auotintegrationbranch = "auto-integration-${{ github.run_id }}"

            if ( context.issue.number != undefined ) {
              const response = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                per_page: 100,
              })
              const reg = new RegExp("\\*+" + BOT_NAME + "\\*+")
              botComment= response.data.find(comment => comment.body.match(reg))
              if (botComment) {
                comments = botComment.body.split("\n")
                core.debug(botComment)
                // console.log(comments.length)
                if (comments.length > 3) {
                  auotintegrationbranch = comments[3].replace("PrBranch: ", "")
                  console.log("auotintegrationbranch: " + auotintegrationbranch)
                }
              }
            }

            const comment_body = "${{ github.event.comment.body }}"
            const organization = "${{ inputs.organization }}"
            const repository = "${{ inputs.repository }}"
            let topic = "undefined"
            integrationrepo = "${{ inputs.integrationrepo }}"
            tagsha = "${{ inputs.tagsha }}"

            let milestone = 'V23-Beta'
            // get latest milestone from linuxdeepin/developer-center
            const msresp = await github.rest.issues.listMilestones({
              owner: "linuxdeepin",
              repo: "developer-center",
              state: 'open',
              sort: 'completeness',
            });

            core.debug("Get milestone resp: ", msresp)
            msresp_content = msresp.data
            if (msresp_content.length > 0) {
              milestone = msresp_content[0].title
              console.log("Got latest milestone: ", milestone)
            }

            // example: integrate V23-Beta dtk-v23-test
            nameGroup = comment_body.split(" ")
            if (nameGroup.length > 1 && nameGroup[1] != "") {
              topic = nameGroup[1]
              // 带topic参数直接指定分支，保证后续多个项目同topic集成时一起修改integration.yml
              console.log("Use topic: ", topic, " to auto integrate")
              auotintegrationbranch = "topic-auto-integration-" + topic
            }

            // checkout the branch if it existed
            const shell = require('shelljs')
            if (shell.exec(`git fetch origin ${auotintegrationbranch} && git checkout FETCH_HEAD integration.yml`).code !== 0) {
              console.log(auotintegrationbranch, " not existed, use master branch")
            }

            // genarate integration.yml
            const yaml = require('js-yaml')
            const fs = require('fs')

            integrationContent = yaml.load(fs.readFileSync('integration.yml'), 'utf8')
            // use pull request title as integration title
            integrationContent.message = "${{ github.event.issue.title }} by ${{ github.event.issue.user.login }}@${{ github.repository }}"
            integrationContent.milestone = milestone
            if (topic != "undefined") {
              integrationContent.topic = topic
            }

            // add timestamp to integration
            integrationContent.timestamp = Date.now()

            // remove example integration item
            console.log("repos: ", integrationContent.repos)
            integrationContent.repos = integrationContent.repos.filter(item => item.repo != "linuxdeepin/examplerepo")
            console.log("filter repos: ", integrationContent.repos)
            repoindex = integrationContent.repos.map((item) => item.repo).indexOf(integrationrepo)
            console.log("find repoindex: ", repoindex)
            if (repoindex >= 0) {
              console.log("update")
              integrationContent.repos[repoindex] = {repo: integrationrepo, tagsha: tagsha}
            } else {
              console.log("push")
              integrationContent.repos.push({repo: integrationrepo, tagsha: tagsha})
            }

            fs.writeFile('integration.yml', yaml.dump(integrationContent, {
                                              'sortKeys': false        // sort object keys
                                            }), (err) => {
                if (err) {
                    console.log(err);
                }
            });

            console.log("finally repos: ", integrationContent.repos)
            console.log("finally auotintegrationbranch: " + auotintegrationbranch)
            core.setOutput('branch', auotintegrationbranch)
            core.setOutput('prnumber', context.issue.number)

      - name: Remove node_modules dir
        run: |
          rm -rf node_modules package-lock.json package.json
          git diff .

      - name: Create or update integration pr
        uses: peter-evans/create-pull-request@v6.0.4
        id: cpr
        with:
          token: ${{ steps.integration_token.outputs.app_token }}
          branch: ${{ steps.integration-config.outputs.branch }}
          title: "auto integration ${{ inputs.integrationrepo }}"
          body: "auto integration from pr https://github.com/${{ github.repository }}/pull/${{ steps.integration-config.outputs.prnumber }}."
          commit-message: "chore: Update integration.yml"
          committer: github-actions <github-actions@users.noreply.github.com>
          signoff: true
          delete-branch: true

      - name: Link integration pr
        uses: actions/github-script@v6
        with:
          script: |
            const BOT_NAME = "AutoIntegrationPr Bot"
            const COMMENT_HEAD = "**" + BOT_NAME + "**\n"

            let COMMENT_BODY = ""
            COMMENT_BODY += "auto integrate with pr url: ${{ steps.cpr.outputs.pull-request-url }}\n"
            COMMENT_BODY += "PrNumber: ${{ steps.cpr.outputs.pull-request-number }}\n"
            COMMENT_BODY += "PrBranch: ${{ steps.integration-config.outputs.branch }}\n"

            if ( context.issue.number != undefined ) {
              const response = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              })
              const reg = new RegExp("\\*+" + BOT_NAME + "\\*+")
              BotComment= response.data.find(comment => comment.body.match(reg))
              if (BotComment) {
                await github.rest.issues.updateComment({
                    comment_id: BotComment.id,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: COMMENT_HEAD + COMMENT_BODY
                })
              } else {
                await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: COMMENT_HEAD + COMMENT_BODY
                })
              }
            }
